{"ast":null,"code":"var _jsxFileName = \"/home/abu/Documents/dev/experiments/exp1/client/src/components/home/Stream.js\";\nimport React from 'react';\nimport offline from \"./offline.jpg\";\nimport Janus from './Janus';\nimport $ from 'jquery';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('react-dom');\n\nwindow.React2 = require('react');\nconst server = \"http://localhost:8088/janus\"; // server = process.env.REACT_APP_JANUS_URL;\n\nlet janusRoom = null;\nlet vroomHandle = null;\nlet myroom = 1234;\nlet opaqueId = \"videoroom-\" + Janus.randomString(12);\nlet mypvtid = null;\nlet myusername = null;\nlet feeds = [];\nlet myid = null;\nlet mystream = null;\n\nclass Stream extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.startJanusServerRoom();\n  }\n\n  startJanusServerRoom() {\n    function publishOwnFeed(useAudio) {\n      // Publish our stream\n      vroomHandle.createOffer({\n        media: {\n          audioRecv: false,\n          videoRecv: false,\n          audioSend: useAudio,\n          videoSend: true\n        },\n        // Publishers are sendonly\n        success: function (jsep) {\n          Janus.debug(\"Got publisher SDP!\");\n          Janus.debug(jsep);\n          const publish = {\n            \"request\": \"configure\",\n            \"audio\": useAudio,\n            \"video\": true\n          };\n          vroomHandle.send({\n            \"message\": publish,\n            \"jsep\": jsep\n          });\n        },\n        error: function (error) {\n          Janus.error(\"WebRTC error:\", error);\n\n          if (useAudio) {\n            publishOwnFeed(false);\n          }\n        }\n      });\n    }\n\n    function newRemoteFeed(id, display, audio, video) {\n      // A new feed has been published, create a new plugin handle and attach to it as a subscriber\n      let remoteFeed = null;\n      janusRoom.attach({\n        plugin: \"janus.plugin.videoroom\",\n        opaqueId: opaqueId,\n        success: function (pluginHandle) {\n          remoteFeed = pluginHandle;\n          console.log(\"Plugin attached! (\" + remoteFeed.getPlugin() + \", id=\" + remoteFeed.getId() + \")\");\n          console.log(\"  -- This is a subscriber\"); // We wait for the plugin to send us an offer\n\n          let subscribe = {\n            request: \"join\",\n            room: myroom,\n            ptype: \"subscriber\",\n            feed: id,\n            private_id: mypvtid\n          };\n          remoteFeed.videoCodec = video;\n          remoteFeed.send({\n            message: subscribe\n          });\n        },\n        error: function (error) {\n          Janus.error(\"  -- Error attaching plugin...\", error);\n        },\n        onmessage: function (msg, jsep) {\n          Janus.debug(\" ::: Got a message (subscriber) :::\", msg);\n          let event = msg[\"videoroom\"];\n          console.log(\"Event: \" + event);\n\n          if (event) {\n            if (event === \"attached\") {\n              console.log(`subscriber created and attached!`); // Subscriber created and attached\n\n              for (let i = 1; i < 6; i++) {\n                if (!feeds[i]) {\n                  feeds[i] = remoteFeed;\n                  remoteFeed.rfindex = i;\n                  break;\n                }\n              }\n\n              remoteFeed.rfid = msg[\"id\"];\n              remoteFeed.rfdisplay = msg[\"display\"];\n              console.log(`attached`, remoteFeed);\n              Janus.log(\"Successfully attached to feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") in room \" + msg[\"room\"]);\n              $('#remote' + remoteFeed.rfindex).removeClass('hide').html(remoteFeed.rfdisplay).show();\n            }\n          }\n\n          if (jsep) {\n            Janus.debug(\"Handling SDP as well...\", jsep); // Answer and attach\n\n            remoteFeed.createAnswer({\n              jsep: jsep,\n              // Add data:true here if you want to subscribe to datachannels as well\n              // (obviously only works if the publisher offered them in the first place)\n              media: {\n                audioSend: false,\n                videoSend: false\n              },\n              // We want recvonly audio/video\n              success: function (jsep) {\n                console.log(\"Got SDP!\", jsep);\n                let body = {\n                  request: \"start\",\n                  room: myroom\n                };\n                remoteFeed.send({\n                  message: body,\n                  jsep: jsep\n                });\n              },\n              error: function (error) {\n                console.error(\"WebRTC error:\", error);\n              }\n            });\n          }\n        },\n        iceState: function (state) {\n          Janus.log(\"ICE state of this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") changed to \" + state);\n        },\n        webrtcState: function (on) {\n          Janus.log(\"Janus says this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") is \" + (on ? \"up\" : \"down\") + \" now\");\n        },\n        onlocalstream: function (stream) {// The subscriber stream is recvonly, we don't expect anything here\n        },\n        onremotestream: function (stream) {\n          console.log(\"Remote feed #\" + remoteFeed.rfindex + \", stream:\", stream);\n          let addButtons = false;\n\n          if ($('#remotevideo' + remoteFeed.rfindex).length === 0) {\n            // No remote video yet\n            $('#videoremote' + remoteFeed.rfindex).children('img').remove();\n            $('#videoremote' + remoteFeed.rfindex).append('<video class=\"rounded centered\" id=\"waitingvideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" />');\n            $('#videoremote' + remoteFeed.rfindex).append('<video class=\"rounded centered relative hide\" id=\"remotevideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" autoplay playsinline/>'); // Show the video, hide the spinner and show the resolution when we get a playing event\n\n            $(\"#remotevideo\" + remoteFeed.rfindex).bind(\"playing\", function () {\n              if (remoteFeed.spinner) remoteFeed.spinner.stop();\n              remoteFeed.spinner = null;\n              $('#waitingvideo' + remoteFeed.rfindex).remove();\n              if (this.videoWidth) $('#remotevideo' + remoteFeed.rfindex).removeClass('hide').show();\n\n              if (Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n                // Firefox Stable has a bug: width and height are not immediately available after a playing\n                setTimeout(function () {\n                  let width = $(\"#remotevideo\" + remoteFeed.rfindex).get(0).videoWidth;\n                  let height = $(\"#remotevideo\" + remoteFeed.rfindex).get(0).videoHeight;\n                  $('#curres' + remoteFeed.rfindex).removeClass('hide').text(width + 'x' + height).show();\n                }, 2000);\n              }\n            });\n          }\n\n          Janus.attachMediaStream($('#remotevideo' + remoteFeed.rfindex).get(0), stream);\n          let videoTracks = stream.getVideoTracks();\n\n          if (!videoTracks || videoTracks.length === 0) {\n            // No remote video\n            $('#remotevideo' + remoteFeed.rfindex).hide();\n\n            if ($('#videoremote' + remoteFeed.rfindex + ' .no-video-container').length === 0) {\n              $('#videoremote' + remoteFeed.rfindex).append('<img src=\"' + offline + '\" id=\"img1\" class=\"card-media-image\" style=\"width:300px;height:250px\"></img>');\n            }\n          } else {\n            $('#videoremote' + remoteFeed.rfindex + ' .no-video-container').remove();\n            $('#remotevideo' + remoteFeed.rfindex).removeClass('hide').show();\n          }\n        },\n        oncleanup: function () {\n          Janus.log(\" ::: Got a cleanup notification (remote feed \" + id + \") :::\");\n          if (remoteFeed.spinner) remoteFeed.spinner.stop();\n          $('#remotevideo' + remoteFeed.rfindex).remove();\n          $('#videoremote' + remoteFeed.rfindex).append('<img src=\"' + offline + '\" id=\"img1\" class=\"card-media-image\" style=\"width:300px;height:250px\"></img>');\n        }\n      });\n    } // Initialize the library (all console debuggers enabled)\n\n\n    Janus.init({\n      debug: \"all\",\n      callback: function () {\n        // Make sure the browser supports WebRTC\n        // Create session\n        janusRoom = new Janus({\n          server: server,\n          success: function () {\n            // Attach to VideoRoom plugin\n            janusRoom.attach({\n              plugin: \"janus.plugin.videoroom\",\n              opaqueId: opaqueId,\n              success: function (pluginHandle) {\n                vroomHandle = pluginHandle;\n                Janus.log(\"Plugin attached! (\" + vroomHandle.getPlugin() + \", id=\" + vroomHandle.getId() + \")\");\n                Janus.log(\"  -- This is a publisher/manager\"); // Prepare the username registration\n\n                let reg = Janus.randomString(12);\n                const register = {\n                  \"request\": \"join\",\n                  \"room\": myroom,\n                  \"ptype\": \"publisher\",\n                  \"display\": reg\n                };\n                myusername = reg;\n                vroomHandle.send({\n                  \"message\": register\n                });\n              },\n              error: function (error) {\n                Janus.error(\"  -- Error attaching plugin...\", error);\n              },\n              consentDialog: function (on) {\n                Janus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n              },\n              mediaState: function (medium, on) {\n                Janus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n              },\n              webrtcState: function (on) {\n                Janus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n              },\n              onmessage: function (msg, jsep) {\n                Janus.debug(\" ::: Got a message (publisher) :::\");\n                Janus.debug(msg);\n                let event = msg[\"videoroom\"];\n                Janus.debug(\"Event: \" + event);\n\n                if (event != undefined && event != null) {\n                  if (event === \"joined\") {\n                    // Publisher/manager created, negotiate WebRTC and attach to existing feeds, if any\n                    myid = msg[\"id\"];\n                    mypvtid = msg[\"private_id\"];\n                    console.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n                    publishOwnFeed(true); // Any new feed to attach to?\n\n                    if (msg[\"publishers\"] !== undefined && msg[\"publishers\"] !== null) {\n                      let list = msg[\"publishers\"];\n                      console.log(\"Got a list of available publishers/feeds:\");\n                      console.log(list);\n\n                      for (let f in list) {\n                        let id = list[f][\"id\"];\n                        let display = list[f][\"display\"];\n                        let audio = list[f][\"audio_codec\"];\n                        let video = list[f][\"video_codec\"];\n                        console.log(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n                      }\n                    }\n                  } else if (event === \"destroyed\") {\n                    // The room has been destroyed\n                    Janus.warn(\"The room has been destroyed!\");\n                    console.error(\"The room has been destroyed\");\n                  } else if (event === \"event\") {\n                    // Any new feed to attach to?\n                    if (msg[\"publishers\"] !== undefined && msg[\"publishers\"] !== null) {\n                      console.log('new publishers!');\n                      let list = msg[\"publishers\"];\n\n                      for (let f in list) {\n                        let id = list[f][\"id\"];\n                        let display = list[f][\"display\"];\n                        let audio = list[f][\"audio_codec\"];\n                        let video = list[f][\"video_codec\"];\n                        console.log(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n                        newRemoteFeed(id, display, audio, video);\n                      }\n                    } else if (msg[\"leaving\"] !== undefined && msg[\"leaving\"] !== null) {// One of the publishers has gone away?\n                    } else if (msg[\"unpublished\"] !== undefined && msg[\"unpublished\"] !== null) {\n                      // One of the publishers has unpublished?\n                      if (msg[\"unpublished\"] === 'ok') {\n                        vroomHandle.hangup();\n                        return;\n                      }\n                    } else if (msg[\"error\"] !== undefined && msg[\"error\"] !== null) {\n                      if (msg[\"error_code\"] === 426) {// This is a \"no such room\" error: give a more meaningful description\n                      } else {\n                        alert(msg[\"error\"]);\n                      }\n                    }\n                  }\n                }\n\n                if (jsep !== undefined && jsep !== null) {\n                  Janus.debug(\"Got room event. Handling SDP as well...\");\n                  Janus.debug(jsep);\n                  vroomHandle.handleRemoteJsep({\n                    jsep: jsep\n                  }); // Check if any of the media we wanted to publish has\n                  // been rejected (e.g., wrong or unsupported codec)\n\n                  let audio = msg[\"audio_codec\"];\n\n                  if (mystream && mystream.getAudioTracks() && mystream.getAudioTracks().length > 0 && !audio) {\n                    // Audio has been rejected\n                    alert(\"Our audio stream has been rejected, viewers won't hear us\");\n                  }\n\n                  let video = msg[\"video_codec\"];\n\n                  if (mystream && mystream.getVideoTracks() && mystream.getVideoTracks().length > 0 && !video) {\n                    // Video has been rejected\n                    alert(\"Our video stream has been rejected, viewers won't see us\"); // Hide the webcam video\n\n                    $('#myvideo').hide();\n                    $('#videolocal').append('<div class=\"no-video-container\">' + '<i class=\"fa fa-video-camera fa-5 no-video-icon\" style=\"height: 100%;\"></i>' + '<span class=\"no-video-text\" style=\"font-size: 16px;\">Video rejected, no webcam</span>' + '</div>');\n                  }\n                }\n              },\n              onlocalstream: function (stream) {\n                console.log(\" ::: Got a local stream :::\", stream);\n                mystream = stream;\n                const video = document.querySelector('video#localvideo');\n                const videoTracks = stream.getVideoTracks();\n                console.log(`Using video device: ${videoTracks[0].label}`);\n                video.srcObject = stream;\n              },\n              // onremotestream: function(stream) {\n              // \t// The publisher stream is sendonly, we don't expect anything here\n              // },\n              oncleanup: function () {\n                Janus.log(\" ::: Got a cleanup notification: we are unpublished now :::\");\n                mystream = null;\n              }\n            });\n          },\n          error: function (error) {\n            Janus.error(error);\n            alert(error);\n          },\n          destroyed: function () {\n            console.log('destroyed');\n          }\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Welcome to \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"Reunitus\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 36\n          }, this), \" video room (powered by Janus)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"myvideo\",\n            className: \"container shorter\",\n            children: /*#__PURE__*/_jsxDEV(\"video\", {\n              id: \"localvideo\",\n              className: \"rounded centered\",\n              width: \"100%\",\n              height: \"100%\",\n              autoPlay: true,\n              playsInline: true,\n              muted: \"muted\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: [/*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"videoremote1\",\n              className: \"container\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: offline,\n                id: \"img1\",\n                className: \"card-media-image\",\n                style: {\n                  width: \"300px\",\n                  height: \"250px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 352,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 351,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              id: \"callername\",\n              children: 'Participant 1'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"videoremote2\",\n              className: \"container\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: offline,\n                id: \"img1\",\n                className: \"card-media-image\",\n                style: {\n                  width: \"300px\",\n                  height: \"250px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              id: \"callername\",\n              children: 'Participant 2'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Col, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"videoremote3\",\n              className: \"container\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: offline,\n                id: \"img1\",\n                className: \"card-media-image\",\n                style: {\n                  width: \"300px\",\n                  height: \"250px\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n              id: \"callername\",\n              children: 'Participant 3'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Stream;","map":{"version":3,"sources":["/home/abu/Documents/dev/experiments/exp1/client/src/components/home/Stream.js"],"names":["React","offline","Janus","$","Container","Row","Col","require","window","React2","server","janusRoom","vroomHandle","myroom","opaqueId","randomString","mypvtid","myusername","feeds","myid","mystream","Stream","Component","constructor","props","componentDidMount","startJanusServerRoom","publishOwnFeed","useAudio","createOffer","media","audioRecv","videoRecv","audioSend","videoSend","success","jsep","debug","publish","send","error","newRemoteFeed","id","display","audio","video","remoteFeed","attach","plugin","pluginHandle","console","log","getPlugin","getId","subscribe","request","room","ptype","feed","private_id","videoCodec","message","onmessage","msg","event","i","rfindex","rfid","rfdisplay","removeClass","html","show","createAnswer","body","iceState","state","webrtcState","on","onlocalstream","stream","onremotestream","addButtons","length","children","remove","append","bind","spinner","stop","videoWidth","webRTCAdapter","browserDetails","browser","setTimeout","width","get","height","videoHeight","text","attachMediaStream","videoTracks","getVideoTracks","hide","oncleanup","init","callback","reg","register","consentDialog","mediaState","medium","undefined","list","f","warn","hangup","alert","handleRemoteJsep","getAudioTracks","document","querySelector","label","srcObject","destroyed","render"],"mappings":"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","sourcesContent":["import React from 'react';\n\n\nimport offline from \"./offline.jpg\";\nimport Janus from './Janus';\nimport $ from 'jquery';\nimport { Container, Row, Col } from 'react-bootstrap'\n\nrequire('react-dom');\nwindow.React2 = require('react');\n\n\nconst server = \"http://localhost:8088/janus\";\n// server = process.env.REACT_APP_JANUS_URL;\nlet janusRoom = null;\nlet vroomHandle = null;\nlet myroom = 1234;\nlet opaqueId = \"videoroom-\" + Janus.randomString(12);\nlet mypvtid = null;\nlet myusername = null;\nlet feeds = [];\nlet myid = null;\nlet mystream = null;\n\nclass Stream extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        this.startJanusServerRoom();\n    }\n\n    startJanusServerRoom() {\n        function publishOwnFeed(useAudio) {\n            // Publish our stream\n            vroomHandle.createOffer(\n                {\n                    media: { audioRecv: false, videoRecv: false, audioSend: useAudio, videoSend: true },\t// Publishers are sendonly\n                    success: function (jsep) {\n                        Janus.debug(\"Got publisher SDP!\");\n                        Janus.debug(jsep);\n                        const publish = { \"request\": \"configure\", \"audio\": useAudio, \"video\": true };\n                        vroomHandle.send({ \"message\": publish, \"jsep\": jsep });\n                    },\n                    error: function (error) {\n                        Janus.error(\"WebRTC error:\", error);\n                        if (useAudio) {\n                            publishOwnFeed(false);\n                        }\n                    }\n                });\n        }\n\n        function newRemoteFeed(id, display, audio, video) {\n            // A new feed has been published, create a new plugin handle and attach to it as a subscriber\n            let remoteFeed = null;\n            janusRoom.attach(\n                {\n                    plugin: \"janus.plugin.videoroom\",\n                    opaqueId: opaqueId,\n                    success: function (pluginHandle) {\n                        remoteFeed = pluginHandle;\n                        console.log(\"Plugin attached! (\" + remoteFeed.getPlugin() + \", id=\" + remoteFeed.getId() + \")\");\n                        console.log(\"  -- This is a subscriber\");\n                        // We wait for the plugin to send us an offer\n                        let subscribe = {\n                            request: \"join\",\n                            room: myroom,\n                            ptype: \"subscriber\",\n                            feed: id,\n                            private_id: mypvtid\n                        };\n                        remoteFeed.videoCodec = video;\n                        remoteFeed.send({ message: subscribe });\n                    },\n                    error: function (error) {\n                        Janus.error(\"  -- Error attaching plugin...\", error);\n                    },\n                    onmessage: function (msg, jsep) {\n                        Janus.debug(\" ::: Got a message (subscriber) :::\", msg);\n                        let event = msg[\"videoroom\"];\n                        console.log(\"Event: \" + event);\n                        if (event) {\n                            if (event === \"attached\") {\n                                console.log(`subscriber created and attached!`);\n                                // Subscriber created and attached\n                                for (let i = 1; i < 6; i++) {\n                                    if (!feeds[i]) {\n                                        feeds[i] = remoteFeed;\n                                        remoteFeed.rfindex = i;\n                                        break;\n                                    }\n                                }\n                                remoteFeed.rfid = msg[\"id\"];\n                                remoteFeed.rfdisplay = msg[\"display\"];\n                                console.log(`attached`, remoteFeed)\n                                Janus.log(\"Successfully attached to feed \" + remoteFeed.rfid + \" (\" + remoteFeed.rfdisplay + \") in room \" + msg[\"room\"]);\n                                $('#remote' + remoteFeed.rfindex).removeClass('hide').html(remoteFeed.rfdisplay).show();\n                            }\n                        }\n                        if (jsep) {\n                            Janus.debug(\"Handling SDP as well...\", jsep);\n                            // Answer and attach\n                            remoteFeed.createAnswer(\n                                {\n                                    jsep: jsep,\n                                    // Add data:true here if you want to subscribe to datachannels as well\n                                    // (obviously only works if the publisher offered them in the first place)\n                                    media: { audioSend: false, videoSend: false },\t// We want recvonly audio/video\n                                    success: function (jsep) {\n                                        console.log(\"Got SDP!\", jsep);\n                                        let body = { request: \"start\", room: myroom };\n                                        remoteFeed.send({ message: body, jsep: jsep });\n                                    },\n                                    error: function (error) {\n                                        console.error(\"WebRTC error:\", error);\n                                    }\n                                });\n                        }\n                    },\n                    iceState: function (state) {\n                        Janus.log(\"ICE state of this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") changed to \" + state);\n                    },\n                    webrtcState: function (on) {\n                        Janus.log(\"Janus says this WebRTC PeerConnection (feed #\" + remoteFeed.rfindex + \") is \" + (on ? \"up\" : \"down\") + \" now\");\n                    },\n                    onlocalstream: function (stream) {\n                        // The subscriber stream is recvonly, we don't expect anything here\n                    },\n                    onremotestream: function (stream) {\n                        console.log(\"Remote feed #\" + remoteFeed.rfindex + \", stream:\", stream);\n                        let addButtons = false;\n                        if ($('#remotevideo' + remoteFeed.rfindex).length === 0) {\n                            // No remote video yet\n                            $('#videoremote' + remoteFeed.rfindex).children('img').remove();\n                            $('#videoremote' + remoteFeed.rfindex).append('<video class=\"rounded centered\" id=\"waitingvideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" />');\n                            $('#videoremote' + remoteFeed.rfindex).append('<video class=\"rounded centered relative hide\" id=\"remotevideo' + remoteFeed.rfindex + '\" width=\"100%\" height=\"100%\" autoplay playsinline/>');\n                            // Show the video, hide the spinner and show the resolution when we get a playing event\n                            $(\"#remotevideo\" + remoteFeed.rfindex).bind(\"playing\", function () {\n                                if (remoteFeed.spinner)\n                                    remoteFeed.spinner.stop();\n                                remoteFeed.spinner = null;\n                                $('#waitingvideo' + remoteFeed.rfindex).remove();\n                                if (this.videoWidth)\n                                    $('#remotevideo' + remoteFeed.rfindex).removeClass('hide').show();\n                                if (Janus.webRTCAdapter.browserDetails.browser === \"firefox\") {\n                                    // Firefox Stable has a bug: width and height are not immediately available after a playing\n                                    setTimeout(function () {\n                                        let width = $(\"#remotevideo\" + remoteFeed.rfindex).get(0).videoWidth;\n                                        let height = $(\"#remotevideo\" + remoteFeed.rfindex).get(0).videoHeight;\n                                        $('#curres' + remoteFeed.rfindex).removeClass('hide').text(width + 'x' + height).show();\n                                    }, 2000);\n                                }\n                            });\n                        }\n                        Janus.attachMediaStream($('#remotevideo' + remoteFeed.rfindex).get(0), stream);\n                        let videoTracks = stream.getVideoTracks();\n\n                        if (!videoTracks || videoTracks.length === 0) {\n                            // No remote video\n                            $('#remotevideo' + remoteFeed.rfindex).hide();\n                            if ($('#videoremote' + remoteFeed.rfindex + ' .no-video-container').length === 0) {\n                                $('#videoremote' + remoteFeed.rfindex).append(\n                                    '<img src=\"' + offline + '\" id=\"img1\" class=\"card-media-image\" style=\"width:300px;height:250px\"></img>');\n                            }\n                        } else {\n                            $('#videoremote' + remoteFeed.rfindex + ' .no-video-container').remove();\n                            $('#remotevideo' + remoteFeed.rfindex).removeClass('hide').show();\n                        }\n                    },\n                    oncleanup: function () {\n                        Janus.log(\" ::: Got a cleanup notification (remote feed \" + id + \") :::\");\n                        if (remoteFeed.spinner)\n                            remoteFeed.spinner.stop();\n                        $('#remotevideo' + remoteFeed.rfindex).remove();\n                        $('#videoremote' + remoteFeed.rfindex).append('<img src=\"' + offline + '\" id=\"img1\" class=\"card-media-image\" style=\"width:300px;height:250px\"></img>');\n                    }\n                });\n        }\n\n        // Initialize the library (all console debuggers enabled)\n        Janus.init({\n            debug: \"all\", callback: function () {\n                // Make sure the browser supports WebRTC\n                // Create session\n                janusRoom = new Janus(\n                    {\n                        server: server,\n                        success: function () {\n                            // Attach to VideoRoom plugin\n                            janusRoom.attach(\n                                {\n                                    plugin: \"janus.plugin.videoroom\",\n                                    opaqueId: opaqueId,\n                                    success: function (pluginHandle) {\n                                        vroomHandle = pluginHandle;\n                                        Janus.log(\"Plugin attached! (\" + vroomHandle.getPlugin() + \", id=\" + vroomHandle.getId() + \")\");\n                                        Janus.log(\"  -- This is a publisher/manager\");\n                                        // Prepare the username registration\n                                        let reg = Janus.randomString(12);\n                                        const register = { \"request\": \"join\", \"room\": myroom, \"ptype\": \"publisher\", \"display\": reg };\n                                        myusername = reg;\n                                        vroomHandle.send({ \"message\": register });\n                                    },\n                                    error: function (error) {\n                                        Janus.error(\"  -- Error attaching plugin...\", error);\n                                    },\n                                    consentDialog: function (on) {\n                                        Janus.debug(\"Consent dialog should be \" + (on ? \"on\" : \"off\") + \" now\");\n                                    },\n                                    mediaState: function (medium, on) {\n                                        Janus.log(\"Janus \" + (on ? \"started\" : \"stopped\") + \" receiving our \" + medium);\n                                    },\n                                    webrtcState: function (on) {\n                                        Janus.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n                                    },\n                                    onmessage: function (msg, jsep) {\n                                        Janus.debug(\" ::: Got a message (publisher) :::\");\n                                        Janus.debug(msg);\n                                        let event = msg[\"videoroom\"];\n                                        Janus.debug(\"Event: \" + event);\n                                        if (event != undefined && event != null) {\n                                            if (event === \"joined\") {\n                                                // Publisher/manager created, negotiate WebRTC and attach to existing feeds, if any\n                                                myid = msg[\"id\"];\n                                                mypvtid = msg[\"private_id\"];\n                                                console.log(\"Successfully joined room \" + msg[\"room\"] + \" with ID \" + myid);\n                                                publishOwnFeed(true);\n                                                // Any new feed to attach to?\n                                                if (msg[\"publishers\"] !== undefined && msg[\"publishers\"] !== null) {\n                                                    let list = msg[\"publishers\"];\n                                                    console.log(\"Got a list of available publishers/feeds:\");\n                                                    console.log(list);\n                                                    for (let f in list) {\n                                                        let id = list[f][\"id\"];\n                                                        let display = list[f][\"display\"];\n                                                        let audio = list[f][\"audio_codec\"];\n                                                        let video = list[f][\"video_codec\"];\n                                                        console.log(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n                                                    }\n                                                }\n                                            } else if (event === \"destroyed\") {\n                                                // The room has been destroyed\n                                                Janus.warn(\"The room has been destroyed!\");\n                                                console.error(\"The room has been destroyed\");\n                                            } else if (event === \"event\") {\n                                                // Any new feed to attach to?\n                                                if (msg[\"publishers\"] !== undefined && msg[\"publishers\"] !== null) {\n                                                    console.log('new publishers!')\n                                                    let list = msg[\"publishers\"];\n                                                    for (let f in list) {\n                                                        let id = list[f][\"id\"];\n                                                        let display = list[f][\"display\"];\n                                                        let audio = list[f][\"audio_codec\"];\n                                                        let video = list[f][\"video_codec\"];\n                                                        console.log(\"  >> [\" + id + \"] \" + display + \" (audio: \" + audio + \", video: \" + video + \")\");\n                                                        newRemoteFeed(id, display, audio, video);\n                                                    }\n                                                } else if (msg[\"leaving\"] !== undefined && msg[\"leaving\"] !== null) {\n                                                    // One of the publishers has gone away?\n                                                } else if (msg[\"unpublished\"] !== undefined && msg[\"unpublished\"] !== null) {\n                                                    // One of the publishers has unpublished?\n                                                    if (msg[\"unpublished\"] === 'ok') {\n                                                        vroomHandle.hangup();\n                                                        return;\n                                                    }\n                                                } else if (msg[\"error\"] !== undefined && msg[\"error\"] !== null) {\n                                                    if (msg[\"error_code\"] === 426) {\n                                                        // This is a \"no such room\" error: give a more meaningful description\n                                                    } else {\n                                                        alert(msg[\"error\"]);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        if (jsep !== undefined && jsep !== null) {\n                                            Janus.debug(\"Got room event. Handling SDP as well...\");\n                                            Janus.debug(jsep);\n                                            vroomHandle.handleRemoteJsep({ jsep: jsep });\n                                            // Check if any of the media we wanted to publish has\n                                            // been rejected (e.g., wrong or unsupported codec)\n                                            let audio = msg[\"audio_codec\"];\n                                            if (mystream && mystream.getAudioTracks() && mystream.getAudioTracks().length > 0 && !audio) {\n                                                // Audio has been rejected\n                                                alert(\"Our audio stream has been rejected, viewers won't hear us\");\n                                            }\n                                            let video = msg[\"video_codec\"];\n                                            if (mystream && mystream.getVideoTracks() && mystream.getVideoTracks().length > 0 && !video) {\n                                                // Video has been rejected\n                                                alert(\"Our video stream has been rejected, viewers won't see us\");\n                                                // Hide the webcam video\n                                                $('#myvideo').hide();\n                                                $('#videolocal').append(\n                                                    '<div class=\"no-video-container\">' +\n                                                    '<i class=\"fa fa-video-camera fa-5 no-video-icon\" style=\"height: 100%;\"></i>' +\n                                                    '<span class=\"no-video-text\" style=\"font-size: 16px;\">Video rejected, no webcam</span>' +\n                                                    '</div>');\n                                            }\n                                        }\n                                    },\n                                    onlocalstream: function (stream) {\n                                        console.log(\" ::: Got a local stream :::\", stream);\n                                        mystream = stream;\n                                        const video = document.querySelector('video#localvideo');\n                                        const videoTracks = stream.getVideoTracks();\n                                        console.log(`Using video device: ${videoTracks[0].label}`);\n                                        video.srcObject = stream;\n                                    },\n                                    // onremotestream: function(stream) {\n                                    // \t// The publisher stream is sendonly, we don't expect anything here\n                                    // },\n                                    oncleanup: function () {\n                                        Janus.log(\" ::: Got a cleanup notification: we are unpublished now :::\");\n                                        mystream = null;\n                                    }\n                                });\n                        },\n                        error: function (error) {\n                            Janus.error(error);\n                            alert(error);\n\n                        },\n                        destroyed: function () {\n                            console.log('destroyed');\n                        }\n                    });\n            }\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <p>\n                        Welcome to <code>Reunitus</code> video room (powered by Janus)\n                    </p>\n                    <div>\n                        <div id=\"myvideo\" className=\"container shorter\">\n                            <video id=\"localvideo\" className=\"rounded centered\" width=\"100%\" height=\"100%\" autoPlay playsInline muted=\"muted\"></video>\n                        </div>\n                        {/*<div className=\"panel-body\" id=\"videolocal\"></div>*/}\n                    </div>\n                </header>\n                <h3 id=\"title\"></h3>\n                <Container>\n                    <Row>\n                        <Col>\n                            <div id=\"videoremote1\" className=\"container\">\n                                <img src={offline} id=\"img1\" className=\"card-media-image\" style={{ width: \"300px\", height: \"250px\" }}></img>\n                            </div>\n                            <h3 id=\"callername\">{'Participant 1'}</h3>\n                        </Col>\n                        <Col>\n                            <div id=\"videoremote2\" className=\"container\">\n                                <img src={offline} id=\"img1\" className=\"card-media-image\" style={{ width: \"300px\", height: \"250px\" }}></img>\n                            </div>\n                            <h3 id=\"callername\">{'Participant 2'}</h3>\n                        </Col>\n                        <Col>\n                            <div id=\"videoremote3\" className=\"container\">\n                                <img src={offline} id=\"img1\" className=\"card-media-image\" style={{ width: \"300px\", height: \"250px\" }}></img>\n                            </div>\n                            <h3 id=\"callername\">{'Participant 3'}</h3>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default Stream;\n"]},"metadata":{},"sourceType":"module"}